/**
 * generated by Xtext 2.32.0
 */
package es.unican.istr.xtext.formatting2;

import com.google.inject.Inject;
import es.unican.istr.pasys.pasys.ArtifactDescriptor;
import es.unican.istr.pasys.pasys.ComputationalSystem;
import es.unican.istr.pasys.pasys.DeploymentFileDescriptor;
import es.unican.istr.pasys.pasys.NodeHostedMeter;
import es.unican.istr.pasys.pasys.PhysicalProcessingNode;
import es.unican.istr.pasys.pasys.SystemElement;
import es.unican.istr.xtext.services.MyPasysGrammarAccess;
import java.util.Arrays;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.EMap;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class MyPasysFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyPasysGrammarAccess _myPasysGrammarAccess;

  protected void _format(final ComputationalSystem computationalSystem, @Extension final IFormattableDocument document) {
    EList<SystemElement> _ownedElements = computationalSystem.getOwnedElements();
    for (final SystemElement systemElement : _ownedElements) {
      document.<SystemElement>format(systemElement);
    }
    EMap<String, String> _authenticationFiles = computationalSystem.getAuthenticationFiles();
    for (final Map.Entry<String, String> stringToStringMap : _authenticationFiles) {
      document.<Map.Entry<String, String>>format(stringToStringMap);
    }
  }

  protected void _format(final PhysicalProcessingNode physicalProcessingNode, @Extension final IFormattableDocument document) {
    EList<ArtifactDescriptor> _codeFiles = physicalProcessingNode.getCodeFiles();
    for (final ArtifactDescriptor artifactDescriptor : _codeFiles) {
      document.<ArtifactDescriptor>format(artifactDescriptor);
    }
    EList<DeploymentFileDescriptor> _configFiles = physicalProcessingNode.getConfigFiles();
    for (final DeploymentFileDescriptor deploymentFileDescriptor : _configFiles) {
      document.<DeploymentFileDescriptor>format(deploymentFileDescriptor);
    }
    EList<DeploymentFileDescriptor> _launchingScripts = physicalProcessingNode.getLaunchingScripts();
    for (final DeploymentFileDescriptor deploymentFileDescriptor_1 : _launchingScripts) {
      document.<DeploymentFileDescriptor>format(deploymentFileDescriptor_1);
    }
    EList<NodeHostedMeter> _ownedMeters = physicalProcessingNode.getOwnedMeters();
    for (final NodeHostedMeter nodeHostedMeter : _ownedMeters) {
      document.<NodeHostedMeter>format(nodeHostedMeter);
    }
  }

  public void format(final Object physicalProcessingNode, final IFormattableDocument document) {
    if (physicalProcessingNode instanceof PhysicalProcessingNode) {
      _format((PhysicalProcessingNode)physicalProcessingNode, document);
      return;
    } else if (physicalProcessingNode instanceof XtextResource) {
      _format((XtextResource)physicalProcessingNode, document);
      return;
    } else if (physicalProcessingNode instanceof ComputationalSystem) {
      _format((ComputationalSystem)physicalProcessingNode, document);
      return;
    } else if (physicalProcessingNode instanceof EObject) {
      _format((EObject)physicalProcessingNode, document);
      return;
    } else if (physicalProcessingNode == null) {
      _format((Void)null, document);
      return;
    } else if (physicalProcessingNode != null) {
      _format(physicalProcessingNode, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(physicalProcessingNode, document).toString());
    }
  }
}
