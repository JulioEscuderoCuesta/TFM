/*
 * generated by Xtext 2.40.0
 */
package es.unican.istr.pasys.xtext.formatting2

import com.google.inject.Inject
import es.unican.istr.pasys.pasys.ComputationalSystem
import es.unican.istr.pasys.pasys.PhysicalProcessingNode
import es.unican.istr.pasys.xtext.services.Rai4GrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class Rai4Formatter extends AbstractFormatter2 {
	
	@Inject extension Rai4GrammarAccess

	def dispatch void format(ComputationalSystem computationalSystem, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (systemElement : computationalSystem.ownedElements) {
			systemElement.format
		}
		for (stringToStringMap : computationalSystem.authenticationFiles) {
			stringToStringMap.format
		}
	}

	def dispatch void format(PhysicalProcessingNode physicalProcessingNode, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (artifactDescriptor : physicalProcessingNode.codeFiles) {
			artifactDescriptor.format
		}
		for (deploymentFileDescriptor : physicalProcessingNode.configFiles) {
			deploymentFileDescriptor.format
		}
		for (deploymentFileDescriptor : physicalProcessingNode.launchingScripts) {
			deploymentFileDescriptor.format
		}
		for (nodeHostedMeter : physicalProcessingNode.ownedMeters) {
			nodeHostedMeter.format
		}
	}
	
	// TODO: implement for AWSVirtualProcessingNode, AVROService, ZookeeperService, KafkaService, NodeScheduler, SparkService, StormService, Neo4JService, MemSQLService, CassandraService, PrometheusService, KafkaWorkloadStreamData, Workflow, NodeResourceMeter, CommunicationMeter, KubernetesDeploymentConf, SwarmDeploymentConf, NomadDeploymentConf, StreamRateMeter, WorkflowLatencyMeter, TaskProcessingAmountMeter, StormNimbus, StormSupervisor, StormUI, DataCenter, TaskExecutor, KafkaFlowStreamData, DerivedStreamData
}
